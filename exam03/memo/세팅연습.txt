스프링부트 추가

Spring Boot DevTools
Lombok
Spring Web
Thymeleaf
H2 Database
Spring Data JPA
Validation

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
<scope>test</scope> 테스트로 변경

MVN 추가

Thymeleaf Layout Dialect » 3.2.1
Querydsl JPA Support » 5.0.0
Querydsl APT Support » 5.0.0
Maven APT Plugin » 1.1.3 (com.mysema.maven으로 검색해야 제대로 나옴)
Ojdbc8 » 23.2.0.0
Orai18n » 19.3.0.0



<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>5.0.0</version>
			<classifier>jakarta</classifier>
</dependency>
		jpa랑 apt 둘다 하단 부분에 <classifier>jakarta</classifier> 만들어서 추가
		
		com.mysema.maven은 build/plugins 안에 넣어야 한다.
		
		<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/java</outputDirectory>
							<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>
	으로 바꿔서 넣기
			
		

인텔리j -> Settings

file encoding -> utf-8로 안된 부분 바꾸기
build, Execution... 누르고,
	들어가서 compiler 부분 클릭하고 build project automatically 활성화
	
	
application.properties 열기

server.port=3000

# 라이브 리로드
spring.devtools.livereload.enabled=true

# 타임리프
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=file:src/main/resources/templates/

# 정적 자원(css, js)
spring.resources.static-locations=file:src/main/resources/static/

# 스프링 Data JPA 설정
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.username=SPRINGJPA
spring.datasource.password=aA123456
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl

# 실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true

# 콘솔 창에 출력되는 쿼리를 가독성 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true

# 쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql=trace
#logging.level.org.hibernate=debug
logging.level.org.hibernate.type=trace

spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

	
application-test.properties 만들어서 넣기
- 테스트 시에는 h2 database를 사용한다.


# 스프링 Data JPA 설정
spring.datasource.driver-class-name=oracle.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.url=jdbc:h2:mem:test

# 실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true

# 콘솔 창에 출력되는 쿼리를 가독성 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true

# 쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql=trace
#logging.level.org.hibernate=debug
logging.level.org.hibernate.type=trace

spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


