Spring Data JPA
Pageable 인터페이스
	- 페이징

PageRequest.of(int page, int size)
		- page 페이지 번호(0부터 시작)
		- size 추출 갯수

1. 쿼리 메서드

2. @Query 애노테이션

3. Querydsl
querydsl-jpa
querydsl-apt : 쿼리빌딩 기능이 있는 새로운 클래스를 자동생성 한다.

plugin - 백그라운드 프로그램
apt-maven-plugin

javax
jakarta

BooleanBuilder - Predicate의 구현체
- WHERE 조건

Q엔티티

쿼리 DSL, Repository 인터페이스 상속에
QuerydslPredicateExecutor 추가

lt -> lesser then <
le -> lesser then equal <=
gt -> greater then >
ge -> greater then equal >=
like
desc
asc


4. 연관관계 매핑
@ManyToOne : 다대일 매핑 (한명의 회원이 여러개를 주문하는 경우 생각)
	
		게시글(BoardData) - Many
			- One 쪽의 외래키 (Member : userNo)
			
		회원(Member) - One
		

@OneToMany : 일대다 매핑
		회원(Member) - One 
		게시글(BoardData)  - Many
		
		- 연관 관계의 주인 설정 - 꼭 명시 필요
			- 관계의 변경이 가능한 쪽이 주인  (외래키가 있는 쪽이 주인) (Many쪽이 주인)


@OneToOne : 일대일 매핑 (한명의 회원이 한개의 테이블을 갖는 경우 생각)
	


@ManyToMany (잘 안씀)


5. 영속성 전이

	DB가 아닌, 영속성 내에서 발생
	
	






6. 지연로딩
	@ManyToOne
		- fetch
			FetchType.EAGER : 즉시 로딩 전략 (기본적인 전략)
					- 처음부터 join
					- 테이블 조인이 많으면 로딩이 느려진다(성능 저하)
					
			FetchType.LAZY : 지연 로딩 전략
					- 처음에는 엔티티 데이터만 조회
						- 연관 매핑되어 있는 컬럼을 getter로 조회
						-> 쿼리 실행
						
						즉시 로딩되는 대신 엔티티 매니저에서 조회 -> 조회 후 데이터 요청시
						그때 getter로 조회 후 쿼리 실행
						
						- 조인이 많이 필요한 엔티티에서의 성능 향상
						- 문제는 목록 형태의 데이터 조회시
							1 + N 문제가 발생
							- 필요한 경우에만 즉시 로딩 전략
							- jpql : fetch join
						 
		@OneToMany
				fetch
					기본 전략 : LAZY



7. Auditing을 이용한 공통 속성화
- 엔티티의 상태 변화에 따라서 값이 변경
@CreatedDate
@LastModifiedDate
- 이벤트 감지
@EntityListeners(AuditingEntityListener.class)
- 활성화(설정 클래스)
@EnableJpaAuditing


- 데이터 베이스에 추가될때 값이 변경
@CreationTimestamp
@UpdateTimestamp


참고)
@Column
	updateable = true
	insertable = true

	
	member -> boardData -> member...
순환참조(메모리 부족 오류 발생)
(lombok toString 메서드는 getter를 통해서 값을 조회.)


8. @IdClass
	- 기본키를 여러개 조합해서 사용
	
분류 테이블
분류, 서브분류